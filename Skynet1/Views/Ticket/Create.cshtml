@model Skynet1.Models.TicketViewModel

@{
    ViewBag.Title = "Оформление заявки";
}

<h2>Оформление заявки</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-group">
        @Html.LabelFor(model => model.NameTicket,"Имя", htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.NameTicket, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.NameTicket, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Address,"Полный адрес", htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Phone, "Номер Телефона", htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control phone-input", maxlength = "13" } })
        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            var phoneInput = document.querySelector('.phone-input');

            phoneInput.addEventListener('input', function() {
                if (!phoneInput.value.startsWith('+996')) {
                    phoneInput.value = '+996';
                }
            });

            phoneInput.addEventListener('keypress', function(event) {
                if (phoneInput.value.length >= 13 && !isNaN(event.key)) {
                    event.preventDefault();
                }
            });

            // Set initial value if it's empty
            if (!phoneInput.value.startsWith('+996')) {
                phoneInput.value = '+996';
            }
        });
    </script>

    <div class="form-group">
        @Html.LabelFor(model => model.ServiceId,"Тариф", htmlAttributes: new { @class = "control-label" })
        @Html.DropDownListFor(model => model.ServiceId, new SelectList(Model.Services, "ServiceId", "NameService"), "Тариф", new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ServiceId, "", new { @class = "text-danger" })
    </div>

    @Html.HiddenFor(model => model.Status)

    <div class="form-group">
        <input type="submit" value="Оформить" class="btn btn-primary" />
    </div>
}

<div>
    @Html.ActionLink("Назад", "Index", "Home")
</div>
